name: Build Resume PDF and Deploy to Pages

on:
  push:
    branches:
      - main
    paths:
      - "README.md"
      - ".github/workflows/build-resume.yml"
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    container:
      image: pandoc/latex:latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install emoji-capable fonts (apt/alpine/rpm fallback)
        run: |
          set -e
          if command -v apt-get >/dev/null 2>&1; then
            apt-get update
            apt-get install -y --no-install-recommends fonts-noto-color-emoji fonts-dejavu
          elif command -v apk >/dev/null 2>&1; then
            apk add --no-cache font-noto-emoji ttf-dejavu
          elif command -v microdnf >/dev/null 2>&1; then
            microdnf install -y google-noto-emoji-fonts dejavu-sans-fonts
          else
            echo "No known package manager found; skipping font install"
          fi
          fc-cache -f
          echo "Installed fonts:"
          fc-list | grep -i "noto\|dejavu" | head -n 20 || true

      - name: Set Current Date
        run: echo "DATE_SUFFIX=$(date +'%m_%d_%Y')" >> $GITHUB_ENV

      - name: Convert Markdown to PDF (lualatex for emoji fallback)
        run: |
          PDF_FILENAME="JP_Silva_Resume_${DATE_SUFFIX}.pdf"
          echo "Generating $PDF_FILENAME"
          pandoc README.md \
            --pdf-engine=lualatex \
            -V mainfont="DejaVu Sans" \
            -V monofont="DejaVu Sans Mono" \
            -V fontsize=10pt \
            -o "$PDF_FILENAME"
          echo "PDF_ARTIFACT_NAME=$PDF_FILENAME" >> $GITHUB_ENV

      - name: Upload PDF as build artifact
        uses: actions/upload-artifact@v4
        with:
          name: resume-pdf-${{ env.DATE_SUFFIX }}
          path: ${{ env.PDF_ARTIFACT_NAME }}
          retention-days: 90

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare Pages Artifact
        run: |
          DEPLOY_DIR="_artifact_to_deploy"
          PAGES_FILENAME="JP_Silva_Resume.pdf"
          mkdir -p "$DEPLOY_DIR"
          cp "${PDF_ARTIFACT_NAME}" "$DEPLOY_DIR/$PAGES_FILENAME"
          echo "PDF_PAGES_DEPLOY_PATH=$DEPLOY_DIR" >> $GITHUB_ENV

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.PDF_PAGES_DEPLOY_PATH }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Log GitHub Pages URL
        if: success() && steps.deployment.outputs.page_url != ''
        run: |
          echo "Access: ${{ steps.deployment.outputs.page_url }}JP_Silva_Resume.pdf"
