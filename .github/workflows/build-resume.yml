name: Build Resume PDF and Deploy to Pages

on:
  push:
    branches: [main]
    paths:
      - README.md
      - .github/workflows/build-resume.yml
  workflow_dispatch:

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    # Run this job inside your prebuilt image so tools are preinstalled
    container:
      image: ghcr.io/OWNER/resume-build:latest
      options: --user 1001:1001 # avoids root-owned artifacts on Actions; optional

    permissions:
      contents: read
      pages: write
      id-token: write
      packages: read # allow pulling the GHCR image (private repos may need this)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify toolchain (optional)
        run: |
          set -euo pipefail
          fc-list | grep -i "noto\|dejavu" | head -n 25 || true
          pandoc --version | head -n 2

      - name: Set date
        run: echo "DATE_SUFFIX=$(date +'%m_%d_%Y')" >> "$GITHUB_ENV"

      - name: Generate TeX (for debugging)
        run: |
          set -euo pipefail
          pandoc README.md \
            --pdf-engine=lualatex \
            -V fontsize=10pt \
            -o resume-debug.tex
          echo "Generated intermediate resume-debug.tex"

      - name: Upload TeX artifact (debug)
        uses: actions/upload-artifact@v4
        with:
          name: resume-tex-${{ env.DATE_SUFFIX }}
          path: resume-debug.tex
          retention-days: 7

      - name: Build PDF (lualatex)
        run: |
          set -euo pipefail
          PDF_FILENAME="JP_Silva_Resume_${DATE_SUFFIX}.pdf"
          echo "Building $PDF_FILENAME"
          pandoc README.md \
            --pdf-engine=lualatex \
            -V fontsize=10pt \
            -o "$PDF_FILENAME"
          echo "PDF_ARTIFACT_NAME=$PDF_FILENAME" >> "$GITHUB_ENV"

      - name: Upload PDF artifact
        uses: actions/upload-artifact@v4
        with:
          name: resume-pdf-${{ env.DATE_SUFFIX }}
          path: ${{ env.PDF_ARTIFACT_NAME }}
          retention-days: 90

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare Pages content
        run: |
          set -euo pipefail
          mkdir -p _artifact_to_deploy
          cp "${{ env.PDF_ARTIFACT_NAME }}" "_artifact_to_deploy/JP_Silva_Resume.pdf"
          echo "PDF_PAGES_DEPLOY_PATH=_artifact_to_deploy" >> "$GITHUB_ENV"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.PDF_PAGES_DEPLOY_PATH }}

      - name: Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Log URL
        if: success() && steps.deployment.outputs.page_url != ''
        run: |
          BASE_URL='${{ steps.deployment.outputs.page_url }}'
          case "$BASE_URL" in
            */) URL="${BASE_URL}JP_Silva_Resume.pdf" ;;
            *)  URL="${BASE_URL}/JP_Silva_Resume.pdf" ;;
          esac
          echo "Access: $URL"
